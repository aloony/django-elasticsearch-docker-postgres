version: "3.7"

services:
  db:
    container_name: "db"
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: envs/.postgres.env
    ports:
      - 5432:5432

  elasticsearch:
    container_name: "elasticsearch"
    image: elasticsearch:8.3.2
    environment:
      - discovery.type=single-node
      - http.cors.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=pass
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data/

    ports:
      - "9200:9200"
      - "9300:9300" # ik, multiple nodes not used, but anyway, sanity check

  api:
    container_name: "api"
    build:
      context: api
    command: >
      sh -c " python manage.py runserver 0.0.0.0:8000"
    ports:
      - 8000:8000
    restart: "always"
    env_file: envs/.django.env
    volumes:
      - ./api:/app
    depends_on:
      - db
      - elasticsearch
      - rabbitmq

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:3-management-alpine
    env_file: ./envs/.rabbitmq.env
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/

  flask:
    container_name: "flask"
    env_file: ./envs/.flask.env
    build:
      context: flask
    command: >
      sh -c "python main.py"
    depends_on:
      - api
      - rabbitmq
      - db
    volumes:
      - ./flask:/app
    ports:
      - 8080:8080
    restart: always

volumes:
  postgres_data:
  rabbitmq_data:
  rabbitmq_log:
  elasticsearch_data:

networks:
  rabbitmq_net:
    driver: bridge
